#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tg_qwerty {
            bindings = <&change_lang>;
            key-positions = <25 26 27>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };
    };

    macros {
        change_lang: change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &kp LC(SPACE)>;
            label = "CHANGE_LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&mt LGUI RBKT    &kp Q  &kp W  &kp F      &kp P          &kp B        &kp J        &kp L           &kp U      &kp Y    &kp SEMI  &mt LEFT_GUI LEFT_BRACKET
&mt LCTRL GRAVE  &kp A  &kp R  &kp S      &kp T          &kp G        &kp K        &kp N           &kp E      &kp I    &kp O     &mt RCTRL SQT
&mt LALT MINUS   &kp Z  &kp X  &kp C      &kp D          &kp V        &kp M        &kp H           &kp COMMA  &kp DOT  &kp FSLH  &mt RALT BSLH
                               &lt 3 TAB  &mt LSHFT ESC  &lt 2 SPACE  &lt 2 ENTER  &mt RSHFT BSPC  &lt 3 DEL
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T   &kp Y   &kp U   &kp I      &kp O       &kp P     &trans
&trans  &kp A  &kp S  &kp D   &kp F   &kp G   &kp H   &kp J   &kp K      &kp L       &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B   &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp FSLH  &trans
                      &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        lower_layer {
            bindings = <
&mt LGUI F1     &kp F2    &kp F3  &kp F4    &kp F5    &kp F6     &kp F7     &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LALT EQUAL  &kp N1    &kp N2  &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &kp RALT
                                  &trans    &trans    &trans     &trans     &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&mt LGUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME  &kp UP           &kp PG_UP  &kp SLCK         &kp CLCK
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT  &kp DOWN         &kp RIGHT  &kp INS          &mt RCTRL K_APP
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp END   &kp PRINTSCREEN  &kp PG_DN  &kp PAUSE_BREAK  &kp RALT
                                             &trans     &trans     &trans        &trans        &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };
    };
};
